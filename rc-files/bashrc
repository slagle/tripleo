# vim: set nonu:

alias hrl='openstack stack resource list'
alias hrlip='openstack stack resource list -n 5 --filter status=IN_PROGRESS -c resource_name -c updated_time overcloud'
alias hrs='openstack stack resource show'
alias hsd='openstack stack delete --wait --yes'
alias hsdo='openstack stack delete --wait --yes overcloud && plan-delete-all'
alias hsl='openstack stack list'
alias hss='openstack stack show'
alias hslw='watch openstack stack list'
alias hsc='openstack stack list --property status=IN_PROGRESS --nested -c ID -f value | xargs  -t openstack stack cancel --no-rollback'
alias hds='openstack software deployment show --long'
alias hcs='openstack software config show'
alias inl='ironic node-list'
alias ins='ironic node-show'
alias ind='ironic node-delete'
alias nl='nova list'
alias nstopha='nova stop overcloud-controller-0 overcloud-controller-1 overcloud-controller-2 overcloud-compute-0'
alias nstartha='nova start overcloud-controller-0 overcloud-controller-1 overcloud-controller-2 overcloud-compute-0'

function indall {
    for n in $(ironic node-list | tail -n +4 | head -n -1 | awk '{print $2}'); do ironic node-delete $n; done
}
function ipoffall {
    for n in $(ironic node-list | grep power | awk '{print $2}'); do ironic node-set-power-state $n off; done
}
function insall {
    for n in $(ironic node-list | grep power | awk '{print $2}'); do ironic node-show  $n; done
}
function insps-provide {
    for n in $(ironic node-list | grep power | awk '{print $2}'); do ironic node-set-provision-state $n provide; done
}
function hrl-controllerpost {
    stack=$(hrl overcloud | grep " ControllerNodesPostDeployment " | awk '{print $4}')
    echo hrl $stack
    hrl $stack
}
function hrl-controller {
    stack=$(hrl overcloud | grep " Controller " | awk '{print $4}')
    echo hrl $stack
    hrl $stack
}
function hrl-compute {
    stack=$(hrl overcloud | grep " Compute " | awk '{print $4}')
    echo hrl $stack
    hrl $stack
}
function hrl-ceph {
    stack=$(hrl overcloud | grep " CephStorage " | awk '{print $4}')
    echo hrl $stack
    hrl $stack
}
function gid {
    glance image-delete \
        bm-deploy-kernel \
        bm-deploy-ramdisk \
        overcloud-full \
        overcloud-full-initrd \
        overcloud-full-vmlinuz
}
function hfd {
    for failed_deployment in $(openstack stack resource list --nested-depth 5 overcloud | grep FAILED | grep -E 'OS::Heat::SoftwareDeployment |OS::Heat::StructuredDeployment ' | cut -d '|' -f 3); do
        echo $failed_deployment;
        openstack software deployment show $failed_deployment;
    done
}

function tripleo-sql-heat-status-complete {
    sudo mysql heat -e "update resource set status='COMPLETE';"
    sudo mysql heat -e "update stack set status='COMPLETE';"
}

function tripleo-sql-heat-status-failed {
    sudo docker stop heat_engine
    sudo docker exec -it -u root mysql mysql heat -e "update resource set status='FAILED' where status='IN_PROGRESS';"
    sudo docker exec -it -u root mysql mysql heat -e "update stack set status='FAILED' where status='IN_PROGRESS';"
    sudo docker start heat_engine
}

function tripleo-sql-heat-delete {
    sudo mysql heat -e "\
        delete from event;
        delete from resource_data;
        delete from resource;
        delete from stack_lock;
        delete from sync_point;
        delete from stack;"
}

function tripleo-sql-nova-delete {
    sudo mysql nova -e "\
        delete from instance_system_metadata;
        delete from instance_metadata;
        delete from instance_info_caches;
        delete from instance_faults;
        delete from instance_actions_events;
        delete from instance_actions;
        delete from block_device_mapping;
        delete from instance_extra;
        delete from virtual_interfaces;
        delete from instances;
        update quota_usages set in_use=0;"
}

function tripleo-sql-ironic-delete {
    sudo mysql ironic -e "update nodes set instance_uuid=NULL;"
    sudo mysql ironic -e "update nodes set provision_state=NULL;"
    sudo mysql ironic -e "update nodes set target_provision_state=NULL;"
    sudo mysql ironic -e "update nodes set power_state='power off';"
    sudo mysql ironic -e "update nodes set target_power_state=NULL";
    sudo mysql ironic -e "update nodes set reservation=NULL";
    sudo mysql ironic -e "update nodes set provision_state='available';"
}

function tripleo-neutron-delete {
    openstack port list -f value -c ID | xargs -r -t openstack port delete
    neutron net-list -f value -c id -c name | grep -v ctlplane | awk '{print $1}' | xargs -r -t -n 1 neutron net-delete
}

function tripleo-sql-overcloud-delete {
    tripleo-sql-heat-delete
    tripleo-sql-nova-delete
    tripleo-sql-ironic-delete
}

function stack-delete-only {
    set -x
    tripleo-sql-overcloud-delete
    tripleo-neutron-delete
    set +x
}

function stack-delete {
    set -x
    stack-delete-only
    plan-delete-all
    set +x
}
alias cont0="ssh heat-admin@\$(nova list | grep controller-0 | awk '{print \$12}' | cut -d'=' -f2) -t 'sudo -i'"
alias cont1="ssh heat-admin@\$(nova list | grep controller-1 | awk '{print \$12}' | cut -d'=' -f2) -t 'sudo -i'"
alias cont2="ssh heat-admin@\$(nova list | grep controller-2 | awk '{print \$12}' | cut -d'=' -f2) -t 'sudo -i'"
alias comp0="ssh heat-admin@\$(nova list | grep compute-0 | awk '{print \$12}' | cut -d'=' -f2) -t 'sudo -i'"
alias comp1="ssh heat-admin@\$(nova list | grep compute-1 | awk '{print \$12}' | cut -d'=' -f2) -t 'sudo -i'"

alias jocc="sudo journalctl -u os-collect-config --full"
alias occtree="sudo pstree -a \$(pidof -x os-collect-config)"
alias puppettree="sudo ps axjf | grep -A5 puppet"
alias pulltripleo="pushd ~/tripleo && git pull && source ~/.bashrc && popd"

function stack-stop-all {
    set -x
    sudo systemctl stop openstack* neutron* httpd mariadb mongod haproxy certmonger keepalived os-collect-config pacemaker corosync pcsd memcached
    set +x
}

function stack-rm-all {
    sudo rm -rf /etc/httpd/* /var/lib/mysql/* /var/lib/rabbitmq/* /var/lib/nova/* \
                /var/lib/ironic/* /etc/rabbitmq/* /var/lib/mongodb/* /etc/nova \
                /etc/heat /etc/keystone /etc/neutron /etc/swift /etc/mistral \
                /etc/ironic /etc/glance /etc/my.cnf.d/* /etc/my.cnf \
                /etc/openvswitch/* /var/lib/openvswitch/* /etc/haproxy/* /var/log/haproxy \
                /var/lib/certmonger/* /etc/certmonger /etc/keepalived \
                /root/.my.cnf /var/lib/config-data /var/lib/tripleo-config \
                /var/lib/tripleo* /var/lib/heat-config
}

function uninstall-undercloud {
    set -x
    items="openvswitch puppet openstack instack tripleo httpd mysql rabbitmq nova ironic rabbitmq mongo mongodb nova ironic heat keystone neutron swift mistral ironic glance cinder zaqar my.cnf my.cnf.d haproxy"
    ifdown br-ctlplane
    rm -f /etc/sysconfig/network-scripts/ifcfg-br-ctlplane
    stack-stop-all
    rpm -qa | grep -E "openvswitch|puppet|openstack|instack|httpd|mariadb|rabbitmq|mongo|tripleo|haproxy|certmonger|keepalived" | xargs sudo yum erase -y
    stack-rm-all
    set +x
}

function pcs-bootstrap {
    sudo systemctl stop pcsd pacemaker corosync
    sudo rm -rf /var/lib/pcsd/* /etc/corosync/corosync.conf /etc/pacemaker/authkey
    sudo hiera -c /etc/puppet/hiera.yaml tripleo::profile::base::pacemaker::remote_authkey > /etc/pacemaker/authkey
    sudo systemctl start pcsd
    # pcsd must be started on each node before the auth/setup/start commands
    # will work!
    sudo pcs cluster auth $(hiera -c /etc/puppet/hiera.yaml pacemaker_short_node_names | jq -r .[]) -u hacluster -p $(hiera -c /etc/puppet/hiera.yaml hacluster_pwd) --force --debug
    sudo pcs cluster setup --wait --name tripleo_cluster $(hiera -c /etc/puppet/hiera.yaml pacemaker_short_node_names | jq -r .[]) --token 10000 --encryption 1 --force
    sudo pcs cluster start --all
    sudo pcs property set stonith-enabled=false
    sudo pcs status
}

function pcs-reset {
    set -x
    sudo pcs cluster stop --force
    sudo pcs cluster destroy
    sudo killall -9 mysqld
    sudo killall -9 epmd rabbitmq-server beam.smp
    sudo systemctl stop pcsd pacemaker corosync
    sudo rm -rf /var/lib/pcsd/* /etc/corosync/corosync.conf /etc/pacemaker/authkey
    set +x
}

function reset-config {
    set -x
    rm -f /etc/keepalived/keepalived.conf
    rm -f /etc/haproxy/haproxy.cfg
    rm -f /etc/my.cnf.d/galera.cnf
    rm -f /etc/swift/*.builder
    rm -f /etc/swift/*.gz
    rm -rf /etc/swift/backups/*
    rm -rf /var/lib/mongodb/*
    set +x
}

function reset-occ {
    set -x
    rm -f /var/lib/os-collect-config/*
    rm -f /var/run/os-collect-config/*
    find /var/lib/heat-config -type f | xargs rm -f
    set +x
}

function overcloud-reset {
    pcs-reset
    stack-stop-all
    sudo rm -f /etc/sysconfig/clustercheck
    rm -rf /var/lib/mysql/* /root/.my.cnf
    rm -rf /etc/rabbitmq/enabled_plugins /etc/rabbitmq/rabbitmqadmin.conf /etc/rabbitmq/rabbitmq-env.conf /etc/rabbitmq/ssl
    reset-hosts
    reset-openvswitch
    reset-config
    reset-occ
}

function reset-ips {
    set -x
    interface=$1
    ip addr show dev $interface | grep "inet " | awk '{print $2;}' | xargs -t -n 1 -r ip addr del dev $interface
    set +x
}

function del-br {
    set -x
    bridge="$1"
    if ip l | grep "$bridge"; then
        sudo ovs-vsctl --may-exist add-br "$bridge"
        sudo ovs-vsctl --if-exists del-br "$bridge"
    fi
    sudo rm -f /etc/sysconfig/network-scripts/ifcfg-${bridge}
    set +x
}

function clean-interface {
    set -x
    interface="$1"
    reset-ips $interface
    rm -f /etc/sysconfig/network-scripts/ifcfg-${interface}
    set +x
}

function clean-mysql {
    mysqld_safe --user=mysql --datadir=/var/lib/mysql --tc-heuristic-recover commit --wsrep-recover
    # or:
    # mysqld_safe --user=mysql --datadir=/var/lib/mysql --wsrep-recover --tc-heuristic-recover rollback
    pcs resource cleanup galera
}

function reset-openvswitch {
    sudo systemctl start openvswitch
    reset-ips br-ex
    del-br br-ex
    del-br br-tun
    del-br br-int
    del-br br-tenant
    del-br br-ctlplane
    sudo systemctl stop openvswitch
    sudo rm -f /etc/openvswitch/conf.db
    sudo systemctl restart openvswitch
    sudo ovs-vsctl show
    if [ -n "$interfaces" ]; then
        for interface in $interfaces; do
            clean-interface $interface
        done
    fi
}

function reset-hosts {
    set -x
    cat >/etc/hosts<<EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
EOF
    set +x
}

function mistral-reset {
    set -x
    mistral workbook-list | grep tripleo | cut -f 2 -d ' ' | xargs -r -t mistral workbook-delete
    mistral workflow-list | grep tripleo | cut -f 2 -d ' ' | xargs -r -t mistral workflow-delete
    for workbook in $(ls /usr/share/openstack-tripleo-common/workbooks/*); do
        mistral workbook-create $workbook
    done

    sudo systemctl restart openstack-mistral-*
    sudo mistral-db-sync --config-file /etc/mistral/mistral.conf
    set +x
}

function swift-delete-all {
    set -x
    openstack container list -f value -c Name | xargs -r -t openstack container delete -r
    set +x
}

function plan-delete-all {
    set -x
    swift-delete-all
    mistral environment-delete overcloud
    set +x
}

function plan-download {
    set -x
    rm -rf overcloud
    mkdir overcloud
    cd overcloud
    swift download overcloud
    cd ..
    set +x
}


function undercloud-upgrade {
    set -x
    sudo yum -y update python-tripleoclient
    openstack undercloud upgrade
    set +x
}

function consistent {
    export DELOREAN_REPO_URL="https://trunk.rdoproject.org/centos7/consistent/"
}

function deployed-server-metadata-url {
	for s in $(openstack stack resource list -n 4 --filter name=deployed-server overcloud -c stack_name -f value | sort); do
		echo $s; openstack stack resource metadata $s deployed-server | jq '.["os-collect-config"].request.metadata_url';
	done
}

# Use to fix "Message: Host 'undercloud' is not mapped to any cell, Code: 400"
alias nova-discover-hosts="su nova -s /bin/bash -c '/usr/bin/nova-manage cell_v2 discover_hosts --verbose'"

export TRIPLEO_ROOT=$HOME/tripleo-root

[ -e stackrc ] && source stackrc
export PYTHONWARNINGS="ignore:Certificate has no, ignore:A true SSLContext object is not available, ignore:SubjectAltNameWarning, ignore:Certificate for"

alias tripleo-mistral-get-private-ssh-key="openstack workflow env show ssh_keys -f json -c Variables | jq .Variables -r | jq .private_key -r"

function tripleo-generate-overclourc {
	STACK_NAME=${STACK_NAME:-"overcloud"}

    openstack action execution run \
        --save-result \
        --run-sync \
        tripleo.deployment.overcloudrc \
        "{\"container\":\"$STACK_NAME\"}" \
        | jq -r '.["result"]["overcloudrc"]' \
        > ${STACK_NAME}rc
}

alias tripleo-logroate="sudo podman exec -it -u root logrotate_crond logrotate -f /etc/logrotate-crond.conf"

function tripleo-uninstall {
    xtrace
    sudo podman ps -aq | xargs -t sudo podman rm -f
    sudo rm -rf \
        /var/lib/tripleo-config \
        /var/lib/config-data /var/lib/container-config-scripts \
        /var/lib/container-puppet \
        /var/lib/heat-config \
        /var/lib/mysql/*
    sudo rm -f /etc/systemd/system/tripleo*
    sudo systemctl daemon-reload
    interfaces="eno2 eno3 eno4 eth1 eth2 eth3 eth4 eth5" reset-openvswitch
    unxtrace
}

function xtrace {
    export old_shellopts=$SHELLOPTS
    set -x
}

function unxtrace {
    export SHELLOPTS=$old_shellopts
}

